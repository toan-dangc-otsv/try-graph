// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.3
//   protoc               v5.27.3
// source: author/src/proto/author.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "author";

export interface Empty {
}

export interface AuthorDetailRequest {
  id: string;
}

export interface Author {
  id: string;
  name: string;
}

export interface CreateAuthorRequest {
  name: string;
}

export interface DeleteAuthorRequest {
  id: string;
}

export interface AuthorList {
  authors: Author[];
}

export const AUTHOR_PACKAGE_NAME = "author";

export interface AuthorServiceClient {
  getAuthors(request: Empty, metadata?: Metadata): Observable<AuthorList>;

  getAuthorById(request: AuthorDetailRequest, metadata?: Metadata): Observable<Author>;

  createAuthor(request: CreateAuthorRequest, metadata?: Metadata): Observable<Author>;

  updateAuthor(request: Author, metadata?: Metadata): Observable<Author>;

  deleteAuthor(request: DeleteAuthorRequest, metadata?: Metadata): Observable<Author>;
}

export interface AuthorServiceController {
  getAuthors(request: Empty, metadata?: Metadata): Promise<AuthorList> | Observable<AuthorList> | AuthorList;

  getAuthorById(request: AuthorDetailRequest, metadata?: Metadata): Promise<Author> | Observable<Author> | Author;

  createAuthor(request: CreateAuthorRequest, metadata?: Metadata): Promise<Author> | Observable<Author> | Author;

  updateAuthor(request: Author, metadata?: Metadata): Promise<Author> | Observable<Author> | Author;

  deleteAuthor(request: DeleteAuthorRequest, metadata?: Metadata): Promise<Author> | Observable<Author> | Author;
}

export function AuthorServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAuthors", "getAuthorById", "createAuthor", "updateAuthor", "deleteAuthor"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthorService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthorService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTHOR_SERVICE_NAME = "AuthorService";
