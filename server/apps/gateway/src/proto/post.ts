// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.3
//   protoc               v5.27.3
// source: post/src/proto/post.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "post";

export interface Empty {
}

/** Posts */
export interface PostDetailRequest {
  id: string;
}

export interface Post {
  id: string;
  title: string;
  image: string;
  content: string;
  body: string;
  createAt: string;
  authorId: string;
  author?: Author | undefined;
}

export interface Author {
  id: string;
  name: string;
}

export interface CreatePostRequest {
  title: string;
  image: string;
  content: string;
  body: string;
  authorId: string;
}

export interface DeletePostRequest {
  id: string;
}

export interface PostList {
  posts: Post[];
}

/** Comments */
export interface Comment {
  id: string;
  comment: string;
  createAt: string;
  postId: string;
}

export interface PostCommentsRequest {
  postId: string;
}

export interface CreateCommentRequest {
  comment: string;
  postId: string;
}

export interface CommentList {
  comments: Comment[];
}

export const POST_PACKAGE_NAME = "post";

export interface PostServiceClient {
  getPosts(request: Empty, metadata?: Metadata): Observable<PostList>;

  getPostById(request: PostDetailRequest, metadata?: Metadata): Observable<Post>;

  createPost(request: CreatePostRequest, metadata?: Metadata): Observable<Post>;

  updatePost(request: Post, metadata?: Metadata): Observable<Post>;

  deletePost(request: DeletePostRequest, metadata?: Metadata): Observable<Post>;

  getPostComments(request: PostCommentsRequest, metadata?: Metadata): Observable<CommentList>;

  createComment(request: CreateCommentRequest, metadata?: Metadata): Observable<Comment>;
}

export interface PostServiceController {
  getPosts(request: Empty, metadata?: Metadata): Promise<PostList> | Observable<PostList> | PostList;

  getPostById(request: PostDetailRequest, metadata?: Metadata): Promise<Post> | Observable<Post> | Post;

  createPost(request: CreatePostRequest, metadata?: Metadata): Promise<Post> | Observable<Post> | Post;

  updatePost(request: Post, metadata?: Metadata): Promise<Post> | Observable<Post> | Post;

  deletePost(request: DeletePostRequest, metadata?: Metadata): Promise<Post> | Observable<Post> | Post;

  getPostComments(
    request: PostCommentsRequest,
    metadata?: Metadata,
  ): Promise<CommentList> | Observable<CommentList> | CommentList;

  createComment(request: CreateCommentRequest, metadata?: Metadata): Promise<Comment> | Observable<Comment> | Comment;
}

export function PostServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getPosts",
      "getPostById",
      "createPost",
      "updatePost",
      "deletePost",
      "getPostComments",
      "createComment",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PostService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PostService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const POST_SERVICE_NAME = "PostService";
